08/26/24

Operating Systems is a virtualized system.
Virtualization:
    - 
Concurrency:
    - splitting the work
    - 
Persistence:
    - how files are represented in your system
    - virtualized memory

killall <program> --> ex: killall cpu

Rust catches things in the compiler
    - Will touch on Rust because it is great for creating Operating Systems

To-Do:
    - Read: Ch. 2 , Ch. 4 , Ch. 5
    - Read: Ch. 6 , Ch. 7 , Ch. 8

NOTICE: NO CLASS MONDAY SEPT 2 LABOR DAY

-------

What is an Operating System?
- sits between the hardware and applications
Top --> Bottom  Users || Applications || Operating System || hardware

Harddrive different from SSD
    - saving a file on a hard drive kind of works like a vending machine
    - SSD has to erase an entire block to rewrite
        - without backups, the data is lost forever

OS provides ABSTRACTION
CPU     --> process and/or thread
Memonry --> address space
Disk    --> files

Virtualization: Make each program believe it has full access to all memory


to run mem.c & cpu.c:
1. clang <filename.c> -Wall -g -o <filename>
2. ./filename

assert library --> error catch

bit fields: O_WRONLY | O_CREAT | O_TRUNC | S_IRWXU
ex: 1111 1111 --> can WR, CREAT, TRUNC, FULL ACCESS
    1111 0111 --> canNOT WR, can TRUNC, can FULL ACCESS

HOMEWORK:
    - real world coding and simulated world ( github projects )
    - process_run.py, README.md in CPU_
    - Ch. 4 ( SKIP Ch. 3 opt. reading )

---------------------------------------------------------------------------------

09/09/24
Figure 4.2 think of it like how a debugger works. It waits for you to step in or step over.

Process_API
    - On Windows is "Create process"
        - Unix it has no params
    - Made to do multiple instructions within the same file
        - "Make a copy of this file, part of it is for Person A, part is for Person B, part is for if it fails"
        - FORK creates a duplication
    - starts AT the call of fork().
    - p1.c either parent or child can run first.
    - p2.c either parent or child can run first, BUT rc_wait() makes parent stop and wait for child. So parent can run first, but it will not bc of rc_wait()
    - p3.c strdup duplicates so that you can terminate the copy and not the original string. prevents seg fault
        - https://www.digitalocean.com/community/tutorials/execvp-function-c-plus-plus
    - p4.c
- ./process_name run on terminal is the CHILD. The terminal IS the PARENT ( remember how each new terminal you run is like a new window )
    - ./process_name& daemon process will run forever, but the PARENT is the INIT process.
- echo < a.txt >> b.txt
    - take what is in a.txt and add it to b.txt
- use "man <name>" for manual. Press "q" to end
-  LMBench --> Firefox
    - put it in Files, extract, 

- fprintf (print to file), printf (print), sprintf (string print to file)
- UTILIZE STDERR - stderr will print to console/terminal