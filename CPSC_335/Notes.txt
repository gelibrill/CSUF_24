08/30/24

Pseduocode: Method used to describe algorithms using a combination of natural language and high level programming constructs
    - Outline for a program
    - How code would work
    - Natural language ( no syntax obligations )
    - Recipe / Instructions for a computer program
    
    Needs:
    - Conditional Statements ( integral part of your pseduocode )
    1. Should be clear enough to be readable
    2. Simplicity and concise
    3. Flexibility

Each algorithm must have an input and output statement or criteria.

Example 1: Finding the Maximum Value in a List
Input: A List of numbers ( L )
Output: The maximum (greatest) number in the list ( L )

Step 1: maxValue <- L[0]
Step 2: for each number ( n ) in L, starting from the second element
Step 3: if  n > maxValue then
            maxValue <- n
        end for
        return maxValue

.strip() --> removes extra spaces
.lower() --> forces input to be lowercase

https://algorithm-visualizer.org

HW:
Example 3: Linear Search for an element in a list
Example 4: Bubble Sort Algorithm

Write pseduocode for both and then write py script. Create a scenario for it.

---------------------------------------------------------------------------------
09/06/24

Efficiency of an Algorithm
- Memory Usage
    - how many times?
- Exectution Time / O-notation
    - how much time?
- Scalability
    - how big of an input/data size can it handle
    - how long will it need it memory?
- Reliability
    - how it's being implimented
    - how it's performing

Exectution ( Big O notation ) time most important, Memory Usage second important

Big O notation tells us how the runtime or memory usage of an algorithm grows relative to input size
input size always denoted as " n "
Purpose of Big O is to predict performance of an algorithm as " n " size grows.
    - Alwyas gives us worst case scenario. Helps determine MAX time an algorithm might take.

Typical Big O Notations:
O(1) - Constant Time
    - When algorithm takes the same amount of time regardless of input size. ( nearly does not exist in a practical world ) BEST case for any algo to work.
O(log n) - Logarithmic Time
    - Time grows slowly as the input size increases. Each step cuts the problem size in half.
O(n) - Linear Time
    - When time grows directly in proportion to the input size.
O(n log n) - Linearithmic Time
    - Merge Sort, Quick Sort
O(n^2) - Quadratic Time
    - When time grows proportional to square of input size. Perhaps inefficient algorithm for larger input sizes.
        - Bubble sort, Insertion sort
O(2^n) - Exponential Time
    - When time doubles with each additional input. Extremely inefficient algorithm structure
O(n!) - Factorial Time
    - Time grows factorially. Traveling Salesman problem.


Example: local library trying to organize books based on authors' names.
O(1)    - like asking to grab the very first book you see. My time to travel, get book, give to you will always be the same.
O(log n)    - Finding a book w a reference guide. like "In B, grab any book with an author that starts with "A" "
O(n)    - Looking at each book one-by-one to find the book you need.
O(n logn)   - organizing books through divide and conquer.
O(n^2)  - comparing every book with every other book for sorting.
O(2^n)  - reading every possible pair of books
O(n!)   - arranging books in every possible order.

https://www.hackerearth.com/practice/algorithms/sorting/bubble-sort/visualize/

Intsertion Sorting Algorithm Pseduocode:

Insertion(arr):
# loop through each elem
    for i from 1 to length(arr) do
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key do
            arr[j+1] = arr[j]
            j = j-1
        arr[j+1] = key

10/11

Graph:
Graphs represent systems and their relationships. they allow us to solve complex relationships in algorithms

- Vertices: finite set of objects ( also called nodes )
- Edges: set of pairs of vertices, representing the connection between vertices
    - have no connections, can be traversed both ways.

example: with GPS, the starting point and destination are the vertices and the route is the edge.
    - social networks use Graphs

Types of Graphs:
- Undirected: mutual understanding between two nodes. can be traversed both ways ( A to B and B to A )
    - example: being mutual friends on social media to view each other's content.
- Directed ( Digraph ): edges have relationships.
    - example: if one user follows another, but the other does not follow back. Person A can view Person B's content without B needing to follow back.
- Weighted: each edge will have a numerical value attached to it. value represents the cost/distance/quantitative relationships between nodes
    - example: like a GPS. the route could be the time it takes from A to B or the distance. Route 1 could be long time, short distance. Route 2 could be a greater distance, but same time as route 1
- Unweighted: same as Weighted, BUT has extra costs. ( distance, time, money )

Key aspect of any problem to be modeled as a Graph is to NAVIGATE, SEARCH, or OPTIMIZE the relationships among systems.

Terminology used frequently:
1. Adjacent: two vertices that are connected by the same edge
2. Path: edges and vertices on a route
3. Cycle: start on a vertex and edges take you back to that vertex
4. Degree of a Vertex: number of vertices connected to it
5. Connected Graph: when any Undirected graph and there is a graph between every pair
6. Subgraph: subset of any big graph ( think of Instagram graph )

Key applications of Graph based models:
1. Social Networking Apps/Platforms
2. Internet/Web Crawling/Browsing
3. Transportation/Navigation Systems
4. Communication Networks ( routers, connections )

Breadth-First Search Algorithm ( BSF )
- Graph Traversal Algorithm for Unweighted Graphs
    - Used for searching data, scheduling tasks, navigation maps
    - implimented using Queue
- Real World Applications:
    - Shortest Path in an Unweighted Graph
    - Web Crawlers
    - Network Broadcasting ( like Amber Alert, broadcasts regardless of service provider & devide type )
How it works:
1. Initialization
    - A Queue is initialized with starting node/vertex
    - a list of visted nodes is maintained to avoid revisting the same nodes
2. Exploration
    - Dequeue the current node from the queue and mark it as visted
    - Explore all of its unvisited neighbors.
3. Termination
    - The algorithm is terminated when queue becomes empty

Depth-First Search Algorithm
- Graph Traversal Algorithm, but does not need to be Unweighted Graph
    - Dives deep into the graph for each branch before backtracking
    - implimented recursively using Stack
- Real World Applications:
    - Cycle detection
    - Solving Maze Problems
    - Topological Sorting
How it works:
1. Initialization
    - A STACK is initialized with starting node/vertex
    - a list of visted nodes is maintained to avoid revisting the same nodes
2. Exploration
    - Pop current node from the stack, mark it as visited, and process it.
    - Pull all unvisited nodes on the Stack and Repeat processing
3. Termination
    - The algorithm is terminated when stack becomes empty

Exam:
- Based on all the code done in the class, lecture notes, and the project we did
- CLOSED BOOK, NO NOTES
